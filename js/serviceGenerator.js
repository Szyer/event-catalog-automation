const fs = require('fs');
const path = require('path');

// Read service patterns from formattedServicePatterns.json
const servicePatternsFilePath = '../json/autogenerated/servicePatterns.json';
const servicePatternsRaw = JSON.parse(fs.readFileSync(servicePatternsFilePath, 'utf8'));

// Convert patterns from strings to regular expressions
const servicePatterns = {};
Object.keys(servicePatternsRaw).forEach(serviceName => {
    servicePatterns[serviceName] = new RegExp(servicePatternsRaw[serviceName].slice(1, -2), 'i');
});

// Read event names from eventNames.json
const eventNamesFilePath = path.join(__dirname, '../json/eventNames.json');
const eventNames = JSON.parse(fs.readFileSync(eventNamesFilePath, 'utf8'));

// Create services folder if it doesn't exist
const servicesFolderPath = path.join(__dirname, '../uhx-catalog/services');
if (!fs.existsSync(servicesFolderPath)) {
    fs.mkdirSync(servicesFolderPath);
}

// Function to check if a directory exists
const directoryExists = dirPath => fs.existsSync(dirPath) && fs.lstatSync(dirPath).isDirectory();

// Function to create a service file
const createServiceFile = (serviceName, events) => {
    const serviceFolderPath = path.join(servicesFolderPath, serviceName);
    if (!directoryExists(serviceFolderPath)) {
        fs.mkdirSync(serviceFolderPath);
        const indexFilePath = path.join(serviceFolderPath, 'index.md');
        const content = `---
name: ${serviceName}
summary: |
  Service summary goes here.
owners:
    - digitalcare
---

Service ${serviceName} is responsible for handling the following events:

${events.map(eventName => `- ${eventName}`).join('\n')}


<NodeGraph />`;

        fs.writeFileSync(indexFilePath, content);
        console.log(`Service file created for: ${serviceName}`);
    }
};

// Check for new services and create service files
const existingServices = fs.readdirSync(servicesFolderPath);
Object.keys(servicePatterns).forEach(serviceName => {
    const events = eventNames.filter(eventName => servicePatterns[serviceName].test(eventName));
    if (!existingServices.includes(serviceName)) {
        createServiceFile(serviceName, events);
    }
});

console.log('Services checked and created successfully.');
